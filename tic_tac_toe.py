from read_coordinates import read_coordinates, get_serial_port
import math
from scipy.stats import pearsonr
from scipy.stats import spearmanr
from matplotlib import pyplot as plt
import numpy as np

def compute_distance(point1: list[int,int], point2: list[int, int]) -> float:
    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)

def normalize_pattern(points, size=28):
        points = np.array(points, dtype=float)
        min_vals = points.min(axis=0)
        max_vals = points.max(axis=0)
        normalized_points = ((points - min_vals) / (max_vals - min_vals)) * (size - 1)
        return normalized_points.astype(int)

def check_winner(board):
    winning_positions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),(0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]
    for (a, b, c) in winning_positions:
        if board[a] == board[b] == board[c] and board[a] in ('x', 'o'):
            return f"Winner: {board[a].upper()}"

    if all(cell in ('x', 'o') for cell in board):
        return "Draw"

    return None  # Game still in progress


    
t1=[[0, 19], [0, 19], [0, 19], [0, 19], [0, 19], [0, 19], [1, 19], [0, 19], [1, 19], [0, 19], [1, 19], [1, 20], [9, 20], [11, 20], [11, 22], [11, 22], [12, 22], [11, 22], [12, 22], [12, 23],[13, 23], [13, 23], [14, 23], [14, 23], [23, 23], [24, 23], [24, 24], [24, 26], [24, 24], [25, 26],[24, 26], [25, 26], [25, 27], [25, 26], [25, 27], [27, 27], [27, 26], [27, 24], [27, 23], [27, 23],[27, 23], [27, 22], [27, 22], [27, 20], [27, 19], [27, 19], [27, 19], [27, 18], [27, 16], [27, 15],[27, 15], [27, 15], [27, 14], [27, 12], [27, 11], [27, 11], [27, 11], [27, 10], [27, 9], [27, 8],[27, 7], [27, 7], [27, 7], [27, 6], [27, 4], [27, 3], [27, 3], [27, 3], [27, 2], [27, 0], [27, 0],[27, 0], [27, 0], [27, 0], [27, 0], [27, 0], [27, 0], [27, 0], [27, 0], [27, 0], [27, 0], [27, 1]]
od1=[]
for points in t1:
    od1.append(compute_distance([0,0],points))

t2=[[0, 21], [0, 21], [0, 22], [0, 22], [0, 22], [0, 22], [0, 22], [0, 22], [0, 23], [1, 23], [3, 23], [3, 23], [3, 23], [3, 23], [3, 23], [3, 23], [3, 23], [3, 23], [3, 26], [3, 27], [4, 27], [4, 27], [7, 27], [4, 27], [7, 27], [7, 27], [7, 27], [7, 27], [7, 27], [7, 26], [7, 23], [7, 23], [7, 23], [8, 23], [8, 22], [8, 22], [8, 21], [8, 18], [8, 17], [8, 18],[8, 17], [8, 17], [7, 16], [8, 16], [7, 16], [8, 16], [7, 16], [7, 15], [7, 12], [7, 11],[7, 11], [7, 11], [7, 10], [7, 10], [7, 10], [7, 7], [5, 6], [7, 6], [4, 6], [4, 6],[4, 6], [4, 5], [4, 5], [3, 5], [3, 4], [3, 4], [3, 3], [3, 1], [3, 1], [3, 1],[3, 0], [2, 0], [3, 0], [2, 0], [1, 0], [1, 0], [2, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0],[2, 0], [2, 0], [2, 0], [2, 0], [3, 0], [3, 0], [3, 0], [4, 0], [4, 0], [4, 0], [5, 0], [6, 0], [5, 0], [6, 0], [7, 0], [7, 0], [7, 0], [8, 0], [8, 1], [8, 0], [8, 1], [8, 0], [8, 0], [9, 0], [9, 1], [10, 0], [11, 0], [11, 0], [11, 1], [11, 0],[12, 0], [11, 0], [12, 0], [13, 1], [13, 1], [13, 0], [15, 1], [15, 0], [15, 1], [15, 0]]
od2=[]
for points in t2:
     od2.append(compute_distance([0,0],points))

t3=[[8, 26], [8, 26], [8, 26], [9, 26], [9, 26], [12, 26], [9, 26], [12, 26], [12, 26], [13, 26], [13, 27], [13, 26], [14, 26], [17, 26], [17, 27], [17, 26], [17, 27], [17, 27], [18, 27], [21, 27], [22, 27], [22, 27], [22, 27], [25, 27], [22, 27], [22, 26], [22, 27], [22, 26], [22, 26], [22, 27], [22, 26], [22, 27], [22, 26], [22, 27], [22, 26], [22, 26], [22, 26], [21, 26], [21, 25], [18, 25], [18, 25], [18, 22], [17, 22], [17, 22], [17, 22], [17, 21], [17, 21], [14, 21], [13,21],[13,20]]
od3=[]
for points in t3:
     od3.append(compute_distance([0,0],points))

t4=[[17, 27], [16, 27], [17, 27], [16, 27], [17, 27], [16, 26], [16, 27], [16, 26], [16, 27], [16, 26], [13, 26], [16, 26], [13, 26], [13, 26], [13, 26], [13, 26], [13, 26], [13, 25], [13, 23], [13, 22], [12, 22], [12, 22], [12, 22], [12, 21], [12, 21], [12, 21], [9, 21], [9, 18], [8, 18], [8, 17], [8, 17], [8, 17], [8, 17], [8, 13], [7, 13], [7, 13], [7, 13], [7, 13], [4, 13], [4, 12], [4, 12], [4, 12], [4, 9], [3, 9], [3, 9], [3, 8], [3, 8], [3, 8], [0, 7], [0, 5], [0, 7], [0, 5], [0, 5], [0, 5], [0, 5], [0, 5], [0, 5], [0, 5], [0, 5], [0, 5], [3, 5], [3, 7], [3, 5], [3, 7], [3, 5], [3, 7], [3, 7], [3, 7], [3, 8], [4, 8], [4, 8], [4, 8], [7, 8], [7, 8], [7, 8], [8, 8], [8, 8], [8, 8], [8, 8], [9, 8], [12, 8], [9, 8], [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [16, 8], [16, 8], [16, 8], [17, 8], [17, 8], [17, 8], [17, 8], [19, 8], [21, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [22, 8], [24, 8], [25, 8], [25, 8], [26, 8], [26, 8], [27, 8], [26, 8], [27, 8], [26, 8], [27, 8], [26, 8], [26, 8], [26, 9], [17, 14], [17, 13], [17, 13], [17, 13], [17, 13], [17, 13], [17, 13], [17, 13], [17, 12], [17, 12], [17, 12], [17, 12], [17, 12], [17, 12], [17, 12], [17, 9], [17, 9], [17, 9], [17, 8], [17, 8], [17, 8], [17, 8], [17, 8], [17, 8], [17, 7], [17, 7], [17, 5], [17, 5], [17, 4], [17, 4], [17, 3], [17, 3], [17, 3], [17, 3], [17, 1], [17, 0], [17, 0], [17, 0], [17,0],[17,0]]
od4=[]
for points in t4:
     od4.append(compute_distance([0,0],points))

t5=[[18, 25], [18, 25], [17, 25], [17, 26], [17, 25], [14, 26], [14, 26], [13, 26], [13, 26], [9, 26], [9, 26], [9, 26], [9, 26], [9, 26], [9, 26], [9, 26], [8, 26], [8, 26], [5, 26], [5, 26], [4, 26], [5, 26], [4, 26], [4, 26], [3, 27], [4, 26], [3, 27], [3, 26], [3, 27], [0, 27], [3, 27], [0, 27], [0, 26], [0, 27], [0, 26], [0, 27], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 26], [0, 25], [0, 23], [0, 22], [0, 22], [0, 22], [0, 22], [0, 21], [0, 21], [0, 21], [0, 18], [0, 17], [0, 17], [0, 17], [0, 17], [0, 13], [0, 13], [0, 13], [0, 13], [0, 13], [0, 12], [0, 12], [0, 13], [0, 12], [0, 13], [0, 13], [0, 13], [0, 13], [0, 13], [2, 13], [2, 13], [2, 13], [3, 13], [4, 13], [4, 13], [5, 13], [5, 13], [5, 13], [8, 13], [9, 13], [9, 13], [9, 13], [11, 13], [13, 13], [13, 13], [14, 13], [14, 13], [15, 13], [16, 13], [17, 13], [18, 13], [18, 13], [18, 13], [19, 13], [21, 13], [22, 13], [22, 13], [22, 13], [23, 13], [23, 13], [23, 13], [26, 13], [27, 13], [26, 13], [27, 13], [27, 12], [27, 12], [27, 12], [27, 12], [27, 9], [27, 12], [27, 9], [27, 9], [27, 9], [27, 9], [27, 9], [27, 8], [26, 8], [27, 8], [26, 8], [23, 8], [24, 8], [23, 8], [26, 8], [23, 8], [23, 7], [23, 7], [23, 5], [22, 5], [22, 4], [22, 4], [22, 4], [22, 3], [20, 3], [19, 3], [19, 0], [18, 0], [18, 0], [18, 0], [18, 0], [18, 0], [18, 0], [18,0],[16,0]]
od5=[]
for points in t5:
     od5.append(compute_distance([0,0],points))

t6=[[27, 27], [23, 27], [27, 27], [23, 27], [27, 27], [23, 27], [27, 27], [23, 27],[27, 27], [23, 27], [22, 27], [22, 27], [21, 27], [22, 27], [21, 27], [17, 27],[21, 27], [17, 27], [17, 26], [16, 27], [17, 26], [16, 26], [16, 26], [15, 26],[15, 26], [15, 26], [15, 26], [12, 26], [11, 26], [11, 22], [11, 26], [11, 22],[10, 22], [10, 22], [10, 22], [10, 22], [10, 22], [10, 21], [6, 21], [5, 21],[5, 21], [5, 21], [5, 20], [4, 20], [4, 20], [4, 20], [4, 18], [4, 16], [4, 16],[1, 16], [4, 16], [1, 16], [4, 16], [1, 16], [1, 15], [0, 15], [1, 15], [0, 15],[0, 15], [0, 12], [0, 11], [0, 12], [0, 11], [0, 11], [0, 10], [0, 10], [0, 10],[0, 10], [0, 10], [0, 10], [0, 8], [0, 8], [0, 8], [0, 6], [0, 6], [0, 6], [0, 5],[1, 5], [0, 5], [1, 5], [1, 5], [1, 5], [1, 5], [2, 5], [1, 5], [2, 5], [2, 4],[4, 5], [2, 4], [4, 4], [2, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [5, 4],[5, 0], [5, 4], [5, 1], [5, 0], [6, 0], [7, 0], [8, 0], [8, 0], [10, 0], [8, 0],[10, 0], [11, 0], [11, 0], [11, 0], [11, 0], [12, 0], [14, 0], [13, 0], [14, 0],[16, 0], [14, 0], [16, 0], [16, 0], [16, 0], [16, 0], [17, 0], [19, 0], [19, 0],[20, 0], [21, 0], [22, 0], [22, 0], [22, 0], [22, 0], [22, 0], [22, 0], [22, 0],[22, 0], [23, 0], [22, 0], [23, 0], [24, 0], [23, 0], [24, 0], [24, 1], [24, 0],[23, 2], [24, 1], [24, 2], [24, 1], [24, 2], [24, 4], [25, 4], [24, 4], [25, 4],[24, 4], [25, 4], [25, 4], [24, 4], [25, 4], [24, 4], [25, 4], [25, 5], [24, 5],[25, 5], [24, 5], [25, 5], [25, 5], [24, 5], [25, 5], [24, 5], [25, 5], [24, 5],[25, 5], [24, 5], [25, 6], [24, 6], [25, 6], [24, 6], [24, 6], [24, 8], [24, 6],[24, 8], [24, 9], [24, 8], [24, 9], [24, 10], [23, 10], [23, 10], [22, 10], [22, 10],[22, 11], [22, 10], [22, 11], [22, 11], [22, 11], [22, 11], [21, 11], [22, 11],[21, 11], [20, 11], [19, 11], [19, 13], [19, 11], [0, 11], [0,11],[0,11]]
od6=[]
for points in t6:
     od6.append(compute_distance([0,0],points))

t7=[[4, 22], [4, 22], [5, 22], [8, 22], [8, 25], [8, 23], [8, 25], [8, 23],[8, 23], [8, 25], [8, 23], [9, 25], [8, 25], [9, 25], [9, 25], [9, 25],[9, 25], [9, 25], [12, 25], [12, 25], [13, 25], [13, 26], [13, 26], [14, 26],[17, 26], [18, 26], [18, 26], [18, 26], [18, 26], [18, 26], [18, 26], [21, 26],[18, 26], [21, 26], [22, 26], [22, 26], [23, 26], [23, 27], [23, 26], [23, 26],[23, 27], [26, 27], [23, 26], [26, 27], [27, 27],[27, 26], [27, 27], [27, 26],[27, 27], [27, 26], [26, 26], [23, 26], [26, 26], [23, 26], [23, 26], [23, 26],[23, 25], [22, 25], [23, 25], [22, 25], [22, 22], [22, 22], [22, 22], [22, 22],[22, 21], [22, 22], [21, 21], [19, 21], [18, 21], [21, 21], [18, 21], [18, 18],[18, 18], [18, 18], [18, 17], [18, 17], [17, 17], [17, 17], [14, 17], [14, 13],[13, 13], [13, 13], [13, 13], [13, 13], [13, 12], [12, 12], [9, 12], [9, 9],[9, 9], [9, 9], [9, 9], [9, 8], [9, 8], [9, 8], [8, 8], [8, 7],[8, 7], [8, 6], [8, 5], [6, 5], [5, 5], [5, 4], [4, 4], [4, 4],[4, 3], [3, 3], [3, 3], [3, 1], [3, 3], [2, 1], [2, 2], [2, 0],[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0,0],[1,0]]
od7=[]
for points in t7:
     od7.append(compute_distance([0,0],points))

t8=[[27, 22], [27, 23], [26, 23], [27, 23], [26, 23], [27, 23], [26, 23], [26, 23],[26, 23], [26, 23], [26, 23], [26, 23], [22, 23], [24, 23], [23, 23], [22, 23],[22, 23], [21, 23], [21, 22], [21, 23], [21, 23], [21, 23], [21, 23], [21, 22],[17, 22], [16, 22], [16, 22], [16, 22], [16, 22], [16, 22], [16, 22], [16, 22],[16, 19], [16, 22], [16, 19], [16, 19], [15, 19], [16, 19], [15, 19], [16, 19],[15, 19], [16, 19], [15, 19], [16, 19], [15, 19], [16, 18], [15, 18], [16, 18],[16, 18], [16, 18], [16, 15], [16, 15], [16, 15], [16, 15], [17, 14], [17, 11],[17, 11], [20, 11], [19, 11], [20, 11], [19, 11], [17, 11], [19, 11], [20, 11],[20, 11], [17, 11], [20, 11], [20, 10], [21, 10], [20, 10], [21, 10], [21, 10],[21, 9], [21, 8], [21, 7], [21, 7], [21, 7], [21, 6], [21, 4], [19, 4],[20, 4], [19, 3], [19, 3], [19, 3], [17, 3], [19, 3], [17, 3], [17, 2],[17, 3], [17, 2], [16, 2], [16, 1], [16, 0], [16, 0], [16, 0], [14, 0],[14, 0], [14, 0], [13, 0], [0, 6], [0, 7], [0, 7], [0, 7], [0, 7],[0, 7], [0, 8], [0, 8], [0, 9], [1, 9], [0, 9], [1, 9], [1, 10],[1, 10], [1, 11], [1, 11], [3, 11], [1, 11], [3, 11], [3, 11], [4, 11],[5, 11], [5, 11], [5, 11], [6, 11], [6, 12], [6, 13], [6, 12], [6, 13],[6, 13], [6, 14], [6, 14], [8, 14], [10, 14], [10, 14], [10, 14], [10, 14],[10, 15], [11, 15], [10, 15], [11, 15], [11, 15], [11, 15], [11, 15], [12, 15],[13, 15], [14, 15], [14, 15], [13, 15], [15, 15], [16, 15], [16, 15], [17, 18],[17, 18], [17, 18], [17, 18], [19, 18], [21, 18], [21, 18], [21, 18], [22, 18],[22, 19], [22, 19], [22, 19], [24, 19], [24, 19], [24, 19], [24, 19], [26, 19],[24, 19], [26, 19], [26, 19], [26, 22], [26, 22], [26, 22], [27, 22], [26, 22],[27, 22], [27, 23], [27, 23], [26, 23], [27, 23], [26, 23],[26,23],[26,26]]
od8=[]
for points in t8:
    od8.append(compute_distance([0,0],points))


tx=[[5, 24], [5, 23], [5, 24], [5, 23], [6, 24], [6, 23], [6, 24], [6, 23], [6, 23], [10, 23], [6, 23], [10, 23], [10, 23], [10, 22], [10, 22], [10, 22], [10, 19], [11, 19], [11, 18], [11, 18], [11, 18], [15, 18], [15, 17], [15, 17], [15, 14], [16, 14], [16, 13], [16, 13], [16, 13], [16, 13], [16, 9], [17, 9], [20, 9], [20, 8], [21, 8], [21, 8], [21, 8], [21, 6], [21, 5], [22, 4], [22, 4], [25, 4], [22, 4], [25, 3], [26, 3], [26, 3], [26, 0], [26, 0], [26, 0], [26, 0], [26, 0], [26, 0], [26, 0], [26, 0], [26, 0], [26, 0], [27, 25], [27, 24], [27, 25], [27, 27], [27, 24], [27, 27], [27, 24], [27, 27], [26, 24], [26, 23], [26, 23], [25, 23], [26, 23], [25, 23], [22, 23], [22, 23], [22, 22], [21, 22], [22, 22], [21, 22], [21, 22], [21, 22], [20, 22], [21, 22], [20, 19], [20, 18], [17, 18], [16, 18], [16, 18], [16, 18], [15, 17], [15, 17], [11, 14], [11, 14], [11, 13], [10, 13], [10, 13], [6, 9], [6, 9], [6, 9], [5, 9], [5, 8], [5, 8], [5, 8], [4, 8], [4, 8], [1, 8], [1, 6], [1, 5], [0, 5], [0, 4], [0, 4], [0, 4], [0, 4], [0, 4], [0, 4],[0, 4], [0, 4], [0, 4], [0, 4], [0, 4], [0, 4], [0, 4], [0, 4],[0,4]]

ox=[]
for points in tx:
     ox.append(compute_distance([0,0],points))

to=[[19, 22], [18, 22], [18, 22], [18, 22], [18, 22], [18, 22], [18, 22], [18, 22],[16, 22], [18, 22], [16, 22], [15, 22], [15, 22], [14, 22], [12, 22], [11, 22], [11, 22], [10, 22], [8, 22], [7, 22], [7, 22], [7, 22], [6, 22], [4, 22], [4, 22], [4, 22], [4, 19], [3, 18], [3, 18], [3, 18], [3, 18], [0, 18], [0, 18], [0, 17], [0, 14], [0, 17], [0, 14], [0, 14], [0, 14], [0, 14], [0, 14], [0, 13], [0, 13], [0, 12], [0, 10], [0, 9], [0, 9], [0, 8], [0, 8], [0, 8], [0, 5], [2, 5], [0, 5], [2, 5], [2, 5], [3, 5],[3, 4], [3, 4], [3, 4], [4, 4], [4, 4], [4, 4], [4, 1], [6, 1], [7, 0], [7, 1], [7, 0], [7, 0], [8, 0], [8, 0], [8, 0], [8, 0], [9, 0], [10, 0], [11, 0], [11, 0], [11, 0], [12, 0], [12, 0], [14, 0], [15, 0], [15, 0], [15, 0], [15, 0], [15, 0], [15, 0], [16, 0], [17, 0], [16, 0], [17, 0], [17, 0], [17, 0], [18, 0], [18, 0], [19, 0], [19, 0], [20, 0], [22, 0], [22, 0], [22, 0], [22, 1], [23, 1], [23, 1], [23, 2], [23, 1], [23, 4], [26, 4], [24, 4], [23, 4], [26, 4], [26, 4], [27, 4], [26, 4], [27, 4], [27, 5], [27, 4], [27, 5], [27, 5], [27, 8], [27, 8],[27, 9], [27, 9], [27, 10], [27, 12], [27, 13], [26, 13], [27, 13], [27, 13], [26, 13], [26, 14], [26, 14], [24, 14], [24, 14], [24, 17], [24, 14], [24, 17], [23, 17], [23, 18], [23, 18], [23, 18], [23, 18], [23, 19], [23, 21], [22, 21], [22, 22], [22, 22], [22, 22], [22, 22], [22, 22], [20, 23], [22, 23], [22, 23], [20, 23], [19, 23], [19, 23], [19, 26], [19, 26], [19, 26], [18, 26], [18, 27], [18, 26], [17, 26], [17, 27], [16, 27], [15, 27], [15, 27], [14, 27], [13, 27], [12, 27], [11, 27], [11, 27], [10, 27], [9, 27], [8, 27], [8, 27], [8, 27], [8, 27], [7, 27], [7, 26], [7, 27], [7, 26], [7, 26], [6, 26], [7, 26], [6, 26], [7, 26], [6, 26], [7, 26], [6, 26], [7, 26], [6, 26], [7, 26],[5,24]]

oo=[]
for points in to:
     oo.append(compute_distance([0,0],points))

odnum=[od1,od2,od3,od4,od5,od6,od7,od8]
odshape=[ox,oo]

board=[" "]*9

if __name__ == "__main__":
    serial_port = get_serial_port()
    
    while True:
        print("Draw the grid number (1-9):")
        coordinates1 = read_coordinates(serial_port=serial_port, timeout=5)
        norm1 = normalize_pattern(coordinates1, size=28)
        od_user1 = [compute_distance([0, 0], point) for point in norm1]
        
        odnum=[od1,od2,od3,od4,od5,od6,od7,od8]
        odshape=[ox,oo]
        grid_number = None
        for i in range(len(odnum)):
            smaller, larger = (odnum[i], od_user1) if len(odnum[i]) < len(od_user1) else (od_user1, odnum[i])
            corr1, _ = spearmanr(smaller, larger[:len(smaller)])
            if corr1 > 0.8:
                grid_number = i + 1
                break
        
        if grid_number is None:
            print("Invalid grid number. Please try again.")
            continue
        
        print(f"Grid number {grid_number} selected.")
        
        print("Draw the shape (X or O):")
        coordinates2 = read_coordinates(serial_port=serial_port, timeout=5)
        norm2 = normalize_pattern(coordinates2, size=28)
        od_user2 = [compute_distance([0, 0], point) for point in norm2]
        shape = None
        for i in range(len(odshape)):
            smaller, larger = (odshape[i], od_user2) if len(odshape[i]) < len(od_user2) else (od_user2, odshape[i])
            corr2, _ = spearmanr(smaller, larger[:len(smaller)])
            if corr2 > 0.8:
                shape = 'X' if i == 0 else 'O'
                break
        
        if shape is None:
            print("Invalid shape")
            continue
        print(f"Shape {shape} selected.")
        if board[grid_number - 1] == ' ':
            board[grid_number - 1] = shape
        else:
            print("Cell already occupied. Please try again.")
            continue

        
        result = check_winner(board)
        if result:
            print(result)
            break
          
    